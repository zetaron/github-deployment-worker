#!/bin/sh
set -ex

DEPLOYMENT_EVENT="$(cat /var/cache/deployment/deployment-event.json)"

create_status() {
    state="${1}"
    log_url="${2}"
    description="${3}"
    environment_url="${4}"
    auto_inactive="false"

    DEPLOYMENT_STATUS_URL=$(echo "${DEPLOYMENT_EVENT}" | jq '.deployment.statuses_url')

    STATUS_JSON=$(jq \
                      -n -c -M \
                      --arg state "${state}" \
                      --arg log_url "${log_url}" \
                      --arg description "${description}" \
                      --arg environment_url "${environment_url}" \
                      --arg auto_inactive "${auto_inactive}" \
                      '{ "state": $state, "log_url": $log_url, "description": $description, "environment_url": $environment_url, "auto_inactive": $auto_inactive }'
               )

    curl -X POST \
         --data "${STATUS_JSON}" \
         "${DEPLOYMENT_STATUS_URL}" \
         -H "Authorization: Bearer ${GITHUB_TOKEN}" \
         -H "Accept: application/vnd.github.ant-man-preview+json" \
         -H "Content-Type: application/json"
}

SHA=$(echo "${DEPLOYMENT_EVENT}" | jq '.deployment.sha')
DEPLOYMENT_ENVIRONMENT=$(echo "${DEPLOYMENT_EVENT}" | jq '.deployment.environment')
DEPLOYMENT_ID=$(echo "${DEPLOYMENT_EVENT}" | jq '.deployment.id')
REPO_NAME=$(echo "${DEPLOYMENT_EVENT}" | jq '.repository.name')
REPO_OWNER_LOGIN=$(echo "${DEPLOYMENT_EVENT}" | jq '.repository.owner.login')
RAW_ARCHIVE_URL=$(echo "${DEPLOYMENT_EVENT}" | jq '.repository.archive_url')

ARCHIVE_URL=$(echo "${RAW_ARCHIVE_URL}" | grep 's/{archive_format}/zipball/g' | grep "s/{\/ref}/\/${SHA}/g")
COMPOSE_PROJECT_NAME="${REPO_NAME}-${DEPLOYMENT_ENVIRONMENT}-deployment-${DEPLOYMENT_ID}"

curl -L "${ARCHIVE_URL}" \
     -H "Authorization: Bearer ${GITHUB_TOKEN}"

unzip -d "${SHA}" "${SHA}.zip"
SHORT_SHA=$(echo "${SHA}" | cut -c1-7)
cd "${REPO_OWNER_LOGIN}-${REPO_NAME}-${SHORT_SHA}"

export DEPLOYMENT_TASK
DEPLOYMENT_TASK=$(jq '.deployment.task')

export DEPLOYMENT_PAYLOAD
DEPLOYMENT_PAYLOAD=$(jq '.deployment.payload')

LOG_URL=""
ENVIRONMENT_URL=""

if [ -f "$(pwd)/hooks/github/log_url" ]
then
    # shellcheck source=/dev/null
    . "$(pwd)/hooks/github/log_url"
fi

if [ -f "$(pwd)/hooks/github/environment_url" ]
then
    # shellcheck source=/dev/null
    . "$(pwd)/hooks/github/environment_url"
fi

if [ -f "$(pwd)/hooks/github/pre_deploy" ]
then
    # shellcheck source=/dev/null
    . "$(pwd)/hooks/github/pre_deploy"
fi

if [ -f "$(pwd)/hooks/pre_deploy" ]
then
    # shellcheck source=/dev/null
    . "$(pwd)/hooks/pre_deploy"
fi

if [ -f "$(pwd)/hooks/deploy" ]
then
    # shellcheck source=/dev/null
    . "$(pwd)/hooks/deploy"
else
    create_status "failure" "${LOG_URL}" "You must have a 'hooks/deploy' script."
fi

create_status "pending" "${LOG_URL}" "Deployment in progress." ""

docker wait "${COMPOSE_PROJECT_NAME}_deploy"
exit_status=$?

if [ $exit_status -eq 0 ]
then
   create_status "success" "${LOG_URL}" "Deployment finished successfully." "${ENVIRONMENT_URL}"
else
    create_status "failure" "${LOG_URL}" "Deployment failed." "${ENVIRONMENT_URL}"
fi

if [ -f "$(pwd)/hooks/post_deploy" ]
then
    # shellcheck source=/dev/null
    . "$(pwd)/hooks/post_deploy"
fi

if [ -f "$(pwd)/hooks/github/post_deploy" ]
then
    # shellcheck source=/dev/null
    . "$(pwd)/hooks/github/post_deploy"
fi

exit $exit_status
