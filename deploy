#!/bin/sh
set -e

DEPLOYMENT_EVENT="$(cat /var/cache/deployment/deployment-event.json)"

create_status() {
    state="${1}"
    log_url="${2}"
    description="${3}"
    environment_url="${4}"
    auto_inactive="false"

    DEPLOYMENT_STATUS_URL=$(echo ${DEPLOYMENT_EVENT} | jq '.deployment.statuses_url' | tr -d '"')

    STATUS_JSON=$(jq \
                      -n -c -M \
                      --arg state "${state}" \
                      --arg log_url "${log_url}" \
                      --arg description "${description}" \
                      --arg environment_url "${environment_url}" \
                      --arg auto_inactive "${auto_inactive}" \
                      '{ "state": $state, "log_url": $log_url, "description": $description, "environment_url": $environment_url, "auto_inactive": $auto_inactive }'
               )

    curl -X POST \
         --data "${STATUS_JSON}" \
         "${DEPLOYMENT_STATUS_URL}" \
         -H "Authorization: Bearer ${GITHUB_TOKEN}" \
         -H "Accept: application/vnd.github.ant-man-preview+json" \
         -H "Content-Type: application/json"
}

SHA=$(echo ${DEPLOYMENT_EVENT} | jq '.deployment.sha' | tr -d '"')
DEPLOYMENT_ENVIRONMENT=$(echo ${DEPLOYMENT_EVENT} | jq '.deployment.environment' | tr -d '"')
DEPLOYMENT_ID=$(echo ${DEPLOYMENT_EVENT} | jq '.deployment.id' | tr -d '"')
REPO_NAME=$(echo ${DEPLOYMENT_EVENT} | jq '.repository.name' | tr -d '"')
REPO_OWNER_LOGIN=$(echo ${DEPLOYMENT_EVENT} | jq '.repository.owner.login' | tr -d '"')
RAW_ARCHIVE_URL=$(echo ${DEPLOYMENT_EVENT} | jq '.repository.archive_url' | tr -d '"')

ARCHIVE_URL=$(echo ${RAW_ARCHIVE_URL} | sed 's/{archive_format}/zipball/g' | sed "s/{\/ref}/\/${SHA}/g" | tr -d '"')

cd /var/cache/deployment

if [ ! -f "${SHA}.zip" ]
then
    echo "ARCHIVE_URL: ${ARCHIVE_URL}"
    curl -L ${ARCHIVE_URL} \
         -o "${SHA}.zip" \
         -H "Authorization: Bearer ${GITHUB_TOKEN}"
    echo curl -L ${ARCHIVE_URL} \
         -o "${SHA}.zip" \
         -H "Authorization: Bearer ${GITHUB_TOKEN}"

    ls -lha

    unzip "${SHA}.zip"
fi

ls -lha

SHORT_SHA=$(echo ${SHA} | cut -c1-7)
cd "${REPO_OWNER_LOGIN}-${REPO_NAME}-${SHORT_SHA}"

export DEPLOYMENT_TASK
DEPLOYMENT_TASK=$(echo ${DEPLOYMENT_EVENT} | jq '.deployment.task' | tr -d '"')

export DEPLOYMENT_PAYLOAD
DEPLOYMENT_PAYLOAD=$(echo ${DEPLOYMENT_EVENT} | jq '.deployment.payload' | tr -d '"')

LOG_URL=""
ENVIRONMENT_URL=""

if [ -f "$(pwd)/hooks/github/log_url" ]
then
    # shellcheck source=/dev/null
    . "$(pwd)/hooks/github/log_url"
fi

if [ -f "$(pwd)/hooks/github/environment_url" ]
then
    # shellcheck source=/dev/null
    . "$(pwd)/hooks/github/environment_url"
fi

create_status "pending" "${LOG_URL}" "Deployment in progress." ""

if [ -f "$(pwd)/hooks/github/pre_deploy" ]
then
    # shellcheck source=/dev/null
    . "$(pwd)/hooks/github/pre_deploy"

    if [ $? -ne 0 ]
    then
        create_status "failure" "${LOG_URL}" "GitHub Pre Deployment failed." "${ENVIRONMENT_URL}"
        exit 1
    fi
fi

if [ -f "$(pwd)/hooks/pre_deploy" ]
then
    # shellcheck source=/dev/null
    . "$(pwd)/hooks/pre_deploy"

    if [ $? -ne 0 ]
    then
        create_status "failure" "${LOG_URL}" "Pre Deployment failed." "${ENVIRONMENT_URL}"
        exit 1
    fi
fi

if [ -f "$(pwd)/hooks/deploy" ]
then
    # shellcheck source=/dev/null
    . "$(pwd)/hooks/deploy"

    if [ $? -ne 0 ]
    then
        create_status "failure" "${LOG_URL}" "Deployment failed." "${ENVIRONMENT_URL}"
        exit 1
    fi
else
    create_status "failure" "${LOG_URL}" "You must have a 'hooks/deploy' script."
    exit 1
fi

if [ -f "$(pwd)/hooks/post_deploy" ]
then
    # shellcheck source=/dev/null
    . "$(pwd)/hooks/post_deploy"

    if [ $? -ne 0 ]
    then
        create_status "failure" "${LOG_URL}" "Post Deployment failed." "${ENVIRONMENT_URL}"
        exit 1
    fi
fi

if [ -f "$(pwd)/hooks/github/post_deploy" ]
then
    # shellcheck source=/dev/null
    . "$(pwd)/hooks/github/post_deploy"

    if [ $? -ne 0 ]
    then
        create_status "failure" "${LOG_URL}" "GitHub Post Deployment failed." "${ENVIRONMENT_URL}"
        exit 1
    fi
fi

create_status "success" "${LOG_URL}" "Deployment finished successfully." "${ENVIRONMENT_URL}"
exit 0
